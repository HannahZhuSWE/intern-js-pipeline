"use strict";(self.webpackChunkdocusaurus_dashboard=self.webpackChunkdocusaurus_dashboard||[]).push([[734],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=s,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:3},o="Link test repositories to dashboard",i={unversionedId:"setup/dashboard-setup/link-test-repos-and-dashboard",id:"setup/dashboard-setup/link-test-repos-and-dashboard",title:"Link test repositories to dashboard",description:"Modify Playwright github actions in the test repositories to notify and update dashboard to the latest test results:",source:"@site/docs/setup/dashboard-setup/link-test-repos-and-dashboard.md",sourceDirName:"setup/dashboard-setup",slug:"/setup/dashboard-setup/link-test-repos-and-dashboard",permalink:"/intern-js-pipeline/docs/setup/dashboard-setup/link-test-repos-and-dashboard",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Deploy website to Github pages",permalink:"/intern-js-pipeline/docs/setup/dashboard-setup/deploy-website-to-github-pages"},next:{title:"Setup Multiple Workflows for Different Testing Purposes",permalink:"/intern-js-pipeline/docs/category/setup-multiple-workflows-for-different-testing-purposes"}},l={},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"link-test-repositories-to-dashboard"},"Link test repositories to dashboard"),(0,s.kt)("p",null,"Modify Playwright github actions in the test repositories to notify and update dashboard to the latest test results:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create a personal access token named ",(0,s.kt)("inlineCode",{parentName:"li"},"PAT_TOKEN")," with ",(0,s.kt)("inlineCode",{parentName:"li"},"repo")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"workflow")," permissions",(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"If the organization your dashboard is located in requires SSO enable SSO for the PAT token"))),(0,s.kt)("li",{parentName:"ol"},"Append the following steps to the ",(0,s.kt)("inlineCode",{parentName:"li"},"playwright-onDemand.yml")," file below the current steps in the ",(0,s.kt)("inlineCode",{parentName:"li"},"test")," job.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'    - name: Get current date\n      id: date\n      run: echo "::set-output name=date::$(date +\'%Y-%m-%d\')"\n    - name: Upload HTML report as Artifact\n      uses: actions/upload-artifact@v2\n      if: always()\n      with: \n        name: onDemand\n        path: pw-report/\n\n  storeReports:\n    name: Store reports\n    if: ${{ always() }}\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n    - name: Download all workflow run artifacts\n      uses: actions/download-artifact@v3\n      id: download\n    - name: Publish to external repo\n      if: always()\n      uses: peaceiris/actions-gh-pages@v3.7.3\n      with:\n        external_repository: mspnp/intern-js-pipeline\n        publish_branch: gh-pages\n        personal_token: ${{ secrets.PAT_TOKEN }}\n        publish_dir: ${{steps.download.outputs.download-path}}\n        destination_dir: test-reports/${{ github.repository }}\n        keep_files: true\n        user_name: "github-actions[bot]"\n        user_email: "github-actions[bot]@users.noreply.github.com"\n\n  notify-dashboard:\n    name: Notify Dashboard\n    if: ${{ always() }}\n    needs: [test, storeReports]\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      # Runs a single command using the runners shell\n      - name: Notify docusaurus repo\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n        run: |\n          gh api repos/mspnp/intern-js-pipeline/dispatches \\\n              --raw-field event_type=rebuild-site\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"As a result the `playwright-onDemand.yml` file should look similar to the following code with extra lines to install additional dependencies if required.\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Playwright tests\n\non:\n  # Runs on push or pull requests and nightly\n  push:\n    branches: [ "main" ]\n  pull_request:\n    branches: [ "main" ]\n  schedule: \n    # nightly\n    - cron: \'0 0 * * *\'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n    - name: Install dependencies\n      run: npm ci\n    - name: Install Playwright\n      run: npx playwright install --with-deps\n    - name: Build production build\n      run: npm run build\n    - name: Run your tests\n      run: npm run test\n    - name: Get current date\n      id: date\n      run: echo "::set-output name=date::$(date +\'%Y-%m-%d\')"\n    - name: Upload HTML report as Artifact\n      uses: actions/upload-artifact@v2\n      env:\n          TAG_NAME: test-report-${{ steps.date.outputs.date }}\n      if: always()\n      with: \n        name: onDemand\n        path: pw-report/\n\n  storeReports:\n    name: Store reports\n    if: ${{ always() }}\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n    - name: Download all workflow run artifacts\n      uses: actions/download-artifact@v3\n      id: download\n    - name: Publish to external repo\n      if: always()\n      uses: peaceiris/actions-gh-pages@v3.7.3\n      with:\n        external_repository: mspnp/intern-js-pipeline\n        publish_branch: gh-pages\n        personal_token: ${{ secrets.PAT_TOKEN }}\n        publish_dir: ${{steps.download.outputs.download-path}}\n        destination_dir: test-reports/${{ github.repository }}\n        keep_files: true\n        user_name: "github-actions[bot]"\n        user_email: "github-actions[bot]@users.noreply.github.com"\n\n  notify-dashboard:\n    name: Notify Dashboard\n    if: ${{ always() }}\n    needs: [test, storeReports]\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      # Runs a single command using the runners shell\n      - name: Notify docusaurus repo\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n        run: |\n          gh api repos/mspnp/intern-js-pipeline/dispatches \\\n              --raw-field event_type=rebuild-site\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"This allows the `test` job to store the Playwright artifact. `storeReports` then pushes the Playwright artifact to a folder in the dashboard's `gh_pages`. Lastly, `notify-dashboard` sends a trigger to the dashboard notifying it to rebuild.\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"Change the value of ",(0,s.kt)("inlineCode",{parentName:"li"},"external_repository")," under the ",(0,s.kt)("inlineCode",{parentName:"li"},"storeReports")," job from ",(0,s.kt)("inlineCode",{parentName:"li"},"mspnp/intern-js-pipeline")," to the dashboard's organization and repository name"),(0,s.kt)("li",{parentName:"ol"},"In the ",(0,s.kt)("inlineCode",{parentName:"li"},"notify-dashboard")," job, replace ",(0,s.kt)("inlineCode",{parentName:"li"},"mspnp/intern-js-pipeline")," in ",(0,s.kt)("inlineCode",{parentName:"li"},"repos/mspnp/intern-js-pipeline/dispatches")," with the dashboard's organization and repository name"),(0,s.kt)("li",{parentName:"ol"},"Triggering the playwright Github action should now cause the dashboard's rebuild workflow to execute")))}d.isMDXComponent=!0}}]);